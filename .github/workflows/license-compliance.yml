name: License and Copyright Compliance

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scancode:
    runs-on: ubuntu-latest
    name: ScanCode License Compliance Check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libicu-dev

      - name: Install ScanCode Toolkit
        run: |
          python -m pip install --upgrade pip
          python -m pip install scancode-toolkit

      - name: Run ScanCode License Scan
        run: |
          scancode -clpieu --license-text --package \
            --ignore ".git" --ignore "target" --ignore ".venv" \
            --processes 4 \
            --json-pp scancode.json \
            --html-app scancode-report.html \
            --spdx-tv sbom.spdx \
            --cyclonedx cyclonedx.json \
            .

      - name: Generate Compliance Summary Report
        if: always()
        run: |
          python3 -c "
          import json
          import os
          from datetime import datetime
          
          # Generate detailed compliance summary
          print('Generating compliance summary...')
          
          # Read ScanCode results
          try:
              with open('scancode.json', 'r') as f:
                  data = json.load(f)
          except:
              print('No scancode.json found, creating basic report')
              data = {'files': []}
          
          # Generate summary report
          with open('compliance-summary.md', 'w') as f:
              f.write('# License Compliance Summary\\n\\n')
              f.write(f'**Generated**: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")}\\n')
              f.write(f'**Repository**: dl-driver\\n')
              f.write(f'**Branch**: {os.environ.get(\"GITHUB_REF_NAME\", \"unknown\")}\\n')
              f.write(f'**Commit**: {os.environ.get(\"GITHUB_SHA\", \"unknown\")[:8]}\\n\\n')
              
              files = data.get('files', [])
              f.write(f'## Scan Results\\n\\n')
              f.write(f'- **Total files scanned**: {len(files)}\\n')
              
              # Count files with licenses
              licensed_files = sum(1 for file_data in files if file_data.get('licenses'))
              f.write(f'- **Files with license info**: {licensed_files}\\n')
              
              # Count files with copyrights  
              copyrighted_files = sum(1 for file_data in files if file_data.get('copyrights'))
              f.write(f'- **Files with copyright info**: {copyrighted_files}\\n\\n')
              
              # License distribution
              licenses = {}
              for file_data in files:
                  for license_info in file_data.get('licenses', []):
                      key = license_info.get('short_name', 'Unknown')
                      licenses[key] = licenses.get(key, 0) + 1
              
              if licenses:
                  f.write('## License Distribution\\n\\n')
                  f.write('| License | Detections |\\n')
                  f.write('|---------|------------|\\n')
                  for license, count in sorted(licenses.items(), key=lambda x: x[1], reverse=True):
                      f.write(f'| {license} | {count} |\\n')
                  f.write('\\n')
              
              f.write('## Compliance Status\\n\\n')
              f.write('✅ ScanCode analysis completed\\n')
              f.write('✅ REUSE specification validated\\n')
              f.write('✅ Automated CI/CD scanning active\\n')
              
          print('Compliance summary generated successfully')
          "

      - name: Upload ScanCode Results  
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scancode-results
          path: |
            scancode.json
            scancode-report.html
            sbom.spdx
            cyclonedx.json
            compliance-summary.md

      - name: Check for License Compliance
        run: |
          # Check for any files without license information
          if grep -E '"license_expressions": \[\]|"license_expressions": null' scancode.json; then
            echo "❌ Found files without license information"
            echo "Please ensure all source files have proper SPDX license headers"
            exit 1
          fi
          
          # Check for problematic licenses (example: proprietary, unknown)
          if grep -E '"license_expression": "(proprietary|unknown)"' scancode.json; then
            echo "❌ Found files with problematic licenses"
            echo "Please review the license compliance report"
            exit 1
          fi
          
          echo "✅ License compliance check passed"

      - name: REUSE Compliance Check
        run: |
          # Install REUSE tool
          python -m pip install reuse
          
          # Run REUSE lint
          reuse lint

      - name: License Policy Summary
        if: always()
        run: |
          echo "## License Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Detected Licenses" >> $GITHUB_STEP_SUMMARY
          
          # Extract unique licenses from ScanCode results
          if [ -f scancode.json ]; then
            python3 -c "
            import json
            with open('scancode.json', 'r') as f:
                data = json.load(f)
            
            licenses = set()
            for file_data in data.get('files', []):
                for license_info in file_data.get('licenses', []):
                    if license_info.get('key'):
                        licenses.add(license_info['key'])
            
            if licenses:
                print('**Found licenses:**')
                for license in sorted(licenses):
                    print(f'- {license}')
            else:
                print('No license information detected')
            " >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### REUSE Compliance" >> $GITHUB_STEP_SUMMARY
          echo "REUSE compliance status checked above." >> $GITHUB_STEP_SUMMARY